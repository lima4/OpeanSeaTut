# Setting a basic project up

1. Directory Structure

```jsx
mkdir contracts // All solidity code will run in contracts/ 
mkdir scripts // contain JavaScript files bootstrap the contracts and deploy
```

1. make ‘NFT.sol’ File in ‘contracts/’  n input this code 

```jsx
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract NFT is ERC721 {
    using Counters for Counters.Counter;
    Counters.Counter private currentTokenId;
    
    constructor() ERC721("NFTTutorial", "NFT") {}
    
    function mintTo(address recipient)
        public
        returns (uint256)
    {
        currentTokenId.increment();
        uint256 newItemId = currentTokenId.current();
        _safeMint(recipient, newItemId);
        return newItemId;
    }
}
```

1. Compiling our contract
    - Contract를 작성하였고 Compile, deployment(cost us ETH)하기 위해서 MetaMask account와 Porject를 통합해야 한다.
    - Private key와 Alchemy API key를 저장할 .env 파일 생성
    
    ```jsx
    ALCHEMY_KEY = "alchemy-api-key"
    ACCOUNT_PRIVATE_KEY = "private-key"
    ```
    
    - hardhat.config.js file to add
    
    ```jsx
    /*
    dotnev : 앞서 정의했던 Variables와 hardhat-ethers의 later deploy our contract
    */
    
    /**
    * @type import('hardhat/config').HardhatUserConfig
    */
    
    require('dotenv').config();
    require("@nomiclabs/hardhat-ethers");
    
    const { ALCHEMY_KEY, ACCOUNT_PRIVATE_KEY } = process.env;
    
    module.exports = {
       solidity: "0.8.0",
       defaultNetwork: "rinkeby",
       networks: {
        hardhat: {},
        rinkeby: {
          url: `https://eth-rinkeby.alchemyapi.io/v2/${ALCHEMY_KEY}`,
          accounts: [`0x${ACCOUNT_PRIVATE_KEY}`]
        },
        ethereum: {
          chainId: 1,
          url: `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,
          accounts: [`0x${ACCOUNT_PRIVATE_KEY}`]
        },
      },
    }
    
    maybe following this error : 
    Error HH606: The project cannot be compiled, see reasons below.
    
    The Solidity version pragma statement in these files doesn't match any of the configured compilers in your config. Change the pragma or configure additional compiler versions in your hardhat config.
    
      * @openzeppelin/contracts/utils/Address.sol (^0.8.1)
    
    These files and its dependencies cannot be compiled with your config. This can happen because they have incompatible Solidity pragmas, or don't match any of your configured Solidity compilers.
    
      * contracts/NFT.sol
      * @openzeppelin/contracts/token/ERC721/ERC721.sol
    
    To learn more, run the command again with --verbose
    
    Read about compiler configuration at https://hardhat.org/config
    
    contracts/NFT.sol의 solidity: "0.8.0" => solidity : "0.8.1"
    
    Then Compiled 11 Solidity files successfully 성공적으로 compile 된다. 
    ```
    
    1. Deploying the contract 
    - Scripts/ 안에 deploy.js 파일 만들고 코드 넣기
    
    ```jsx
    async function main() {
    
        // Get our account (as deployer) to verify that a minimum wallet balance is available
        const [deployer] = await ethers.getSigners();
    
        console.log(`Deploying contracts with the account: ${deployer.address}`);
        console.log(`Account balance: ${(await deployer.getBalance()).toString()}`);
    
        // Fetch the compiled contract using ethers.js
        const NFT = await ethers.getContractFactory("NFT");
        // calling deploy() will return an async Promise that we can await on 
        const nft = await NFT.deploy();
    
        console.log(`Contract deployed to address: ${nft.address}`);
    }
    
    main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });
    ```
    
    - deploy.js는 NFT.sol에서의 compiled된 NFT contract를 deploy
